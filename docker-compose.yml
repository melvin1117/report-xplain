version: '3.8'
services:
  backend:
    build: ./backend
    container_name: nestjs-backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
    depends_on:
      - postgres
      - minio
      - rabbitmq
    command: npm run start:dev

  backend-worker:
    build: ./backend
    container_name: nestjs-worker
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
    depends_on:
      - postgres
      - minio
      - rabbitmq
    command: npm run celery-worker

  frontend:
    build: ./frontend
    container_name: angular-frontend
    ports:
      - "80:4200"
    environment:
      - NODE_ENV=development

  postgres:
    image: postgres:13
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - miniodata:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

volumes:
  pgdata:
  miniodata:
  rabbitmqdata:
